name: Build and Test

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

# Provisioned Jobs:
# ubuntu - x86_64 - llvm in-tree     - pytorch binary - build+test    # most used dev flow and fastest signal
# ubuntu - x86_64 - llvm out-of-tree - pytorch source - build+test    # most elaborate build
# macos  - arm64  - llvm in-tree     - pytorch source - build only    # cross compile, can't test arm64


jobs:
  ubuntu-build:
    name: ubuntu-x86_64
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: true
      matrix:
        llvm-build: [in-tree, out-of-tree]
        torch-binary: [ON, OFF]
        exclude:
          # Exclude llvm in-tree and pytorch source
          - llvm-build: in-tree
            torch-binary: OFF
          # Exclude llvm out-of-tree and pytorch binary
          - llvm-build: out-of-tree
            torch-binary: ON

    steps:
    - name: Checkout torch-mlir
      uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ runner.os }}-torch_mlir_build_assets-ubuntu-x86_64-${{ matrix.llvm-build }}-${{ matrix.torch-binary }}
        max-size: 2G

    - name: Build docker image
      run: |
        docker build -f build_tools/docker/Dockerfile \
                     -t torch-mlir-cmake:ci \
                     .

    - name: Build torch-mlir (llvm-build='in-tree' torch-binary='${{ matrix.torch-binary}}')
      # Fastest build, most used dev flow
      if: matrix.llvm-build == 'in-tree'
      run: |
        docker run --rm \
                   -v "$(pwd)":/opt/src/torch-mlir \
                   -e CCACHE_DIR=/opt/src/torch-mlir/.ccache \
                   -e TORCH_BINARY="${{ matrix.torch-binary }}" \
                   torch-mlir-cmake:ci \
                   ./build_tools/docker/run_cmake_build.sh

    - name: Build torch-mlir (llvm-build='out-of-tree' torch-binary='${{ matrix.torch-binary}}')
      # Most elaborate build, but cached
      if: matrix.llvm-build == 'out-of-tree'
      run: |
        docker run --rm \
                   -v "$(pwd)":/opt/src/torch-mlir \
                   -e CCACHE_DIR=/opt/src/torch-mlir/.ccache \
                   -e TORCH_BINARY="${{ matrix.torch-binary }}" \
                   torch-mlir-cmake:ci \
                   ./build_tools/docker/run_cmake_build_oot.sh

    - name: Run torch-mlir unit tests
      run: |
        docker run --rm \
                   -v "$(pwd)":/opt/src/torch-mlir \
                   torch-mlir-cmake:ci \
                   ./build_tools/docker/run_unit_tests.sh

    - name: Run torch-mlir integration tests
      if: matrix.llvm-build == 'in-tree'
      run: |
        docker run --rm \
                   -v "$(pwd)":/opt/src/torch-mlir \
                   torch-mlir-cmake:ci \
                   ./build_tools/docker/run_integration_tests.sh

  macos-build:
    name: macos-arm64
    runs-on: macos-12
    strategy:
      fail-fast: true
      matrix:
        llvm-build: [in-tree, out-of-tree]
        torch-binary: [ON, OFF]
        exclude:
          # Exclude llvm in-tree and pytorch binary
          - llvm-build: in-tree
            torch-binary: ON
          # Exclude llvm out-of-tree altogether
          - llvm-build: out-of-tree

    steps:
    - name: Checkout torch-mlir
      uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Setup ccache
      uses: ./.github/actions/setup-build
      with:
        cache-suffix: macos-arm64-${{ matrix.llvm-build }}-${{ matrix.torch-binary }}

    - name: Configure llvm-build='in-tree' torch-binary='${{ matrix.torch-binary}}'
      # libzstd on GH Runners are only x86_64 to remove them.
      run: |
        cmake -GNinja -Bbuild_arm64 \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_C_COMPILER_LAUNCHER=ccache \
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
          -DCMAKE_LINKER=lld \
          -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DLLVM_ENABLE_ASSERTIONS=ON \
          -DLLVM_ENABLE_PROJECTS=mlir \
          -DLLVM_EXTERNAL_PROJECTS="torch-mlir;torch-mlir-dialects" \
          -DLLVM_EXTERNAL_TORCH_MLIR_SOURCE_DIR="$GITHUB_WORKSPACE" \
          -DLLVM_EXTERNAL_TORCH_MLIR_DIALECTS_SOURCE_DIR="${GITHUB_WORKSPACE}/external/llvm-external-projects/torch-mlir-dialects" \
          -DLLVM_TARGETS_TO_BUILD=AArch64 \
          -DLLVM_USE_HOST_TOOLS=ON \
          -DLLVM_ENABLE_ZSTD=OFF \
          -DMLIR_ENABLE_BINDINGS_PYTHON=ON \
          -DTORCH_MLIR_ENABLE_LTC=OFF \
          -DTORCH_MLIR_ENABLE_MHLO=OFF \
          -DTORCH_MLIR_USE_INSTALLED_PYTORCH="${{ matrix.torch-binary }}" \
          -DMACOSX_DEPLOYMENT_TARGET=12.0 \
          -DPython3_EXECUTABLE="$(which python)" \
          $GITHUB_WORKSPACE/externals/llvm-project/llvm

    - name: Build torch-mlir (cross-compile)
      run: |
        cmake --build build_arm64
